#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include "nav_header.h"
#include <eStop.h>
#include <math.h>

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

float x = 0;
float y = 0;
float phi = 0;
float delta = 0.5;
float pi = 3.14159;
float xStart = 0;
float yStart = 0;
float phiStart = 0;
int done = 0;
int destination = 0;
int seenCount = 0;
int success = 0;


void poseCallback(const geometry_msgs::PoseWithCovarianceStamped& msg){
	phi = tf::getYaw(msg.pose.pose.orientation);
   x = msg.pose.pose.position.x;
   y = msg.pose.pose.position.y;
}

float distance(float x0,float y0, float x1, float y1){
	/* Returns straight line distance between 2 points given
	the x and y coordinates of those points */
	float euclidDistance;	
	euclidDistance = sqrt(pow((x1-x0),2)+pow((y1-y0),2));
	return euclidDistance;
}

bool moveToGoal(float xGoal, float yGoal, float phiGoal){

	//define a client for to send goal requests to the move_base server through a SimpleActionClient
	actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> ac("move_base", true);

	//wait for the action server to come up
	while(!ac.waitForServer(ros::Duration(5.0))){
		ROS_INFO("Waiting for the move_base action server to come up");
	}

	move_base_msgs::MoveBaseGoal goal;

	//set up the frame parameters
	goal.target_pose.header.frame_id = "map";
	goal.target_pose.header.stamp = ros::Time::now();

	/* moving towards the goal*/
   geometry_msgs::Quaternion phi = tf::createQuaternionMsgFromYaw(phiGoal);

	goal.target_pose.pose.position.x =  xGoal;
	goal.target_pose.pose.position.y =  yGoal;
	goal.target_pose.pose.position.z =  0.0;
	goal.target_pose.pose.orientation.x = 0.0;
	goal.target_pose.pose.orientation.y = 0.0;
	goal.target_pose.pose.orientation.z = phi.z;
	goal.target_pose.pose.orientation.w = phi.w;

	ROS_INFO("Sending goal location ...");
	ac.sendGoal(goal);

	ac.waitForResult();

	if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED){
		ROS_INFO("You have reached the destination");
		return true;
	}
	else{
		ROS_INFO("The robot failed to reach the destination");
		return false;
	}

}

int pathPlan(vector< vector< float > >& locations){
	/* Takes in a vector of locations and travels to the closest unvisited location
	as per the nearest neighbour algorithm. Returns to the starting position after
	all locations have been visited */
	float minDist=1000;
	
	for (int i = 0; i < locations.size(); i++){	
		if (minDist > distance(locations[i][0],locations[i][1],x,y) && locations[i][3] == 0){
			minDist = distance(locations[i][0],locations[i][1],x,y);
			destination = i; // Save index of closest vertex
		}
	}
	/*
	if (seenCount == locations.size()){
		if(moveToGoal(xStart,yStart,phiStart)){ // We've visited all boxes so go back home
			done = 1;
			return 1;
		}
		
	}
	else{
		if(moveToGoal(locations[destination][0],locations[destination][1],locations[destination][2])){ // Move to closest vertex
			seenCount = seenCount + 1; // Track the number of visited boxes
			return 1;
		}
		else{
			return 0;
		}
	}*/
	int userData;
  	cout << "Please enter integer 1 to continue: \n";
  	cin >> userData;
  	cout << ".\n";
	return userData;
}

int main(int argc, char** argv){
	cv::initModule_nonfree();
	ros::init(argc, argv, "map_navigation_node");
	ros::NodeHandle n;
	ros::spinOnce();
    	teleController eStop;

	ros::Subscriber amclSub = n.subscribe("/amcl_pose", 1, poseCallback);
	
	vector<vector<float> > coord;
	vector<vector<float> > orient;
	std::vector<cv::Mat> imgs_track;
	vector<vector<float> > target;	
	init(coord, orient, imgs_track);
	// Robot start position; save to return to later
	/*while(x == 0 && y == 0 && phi == 0){
		ros::spinOnce(); // Keep calling Callback until x,y,phi are updated to start position coordinates
	}*/
	// Save starting position cooridnates so we can return to this later
	xStart = x; 
	yStart = y;
	phiStart = phi;	


	//save desired robot positions (modified from box locations)	
	for (int i=0; i<coord.size(); i++){
		coord[i].push_back(orient[i][0]);
		coord[i].push_back(0); // Add visited status for each box -> starts at 0 because no box has been visited
		target.push_back(coord[i]);
		
		// Add offsets to locations so that we will be in front of each box
		target[i][0]=target[i][0]+delta*cos(target[i][2]);
		target[i][1]=target[i][1]+delta*sin(target[i][2]);
		
		// Add angle offsets to locations so that we will face each box head on
		if (target[i][2] >= 0){
			target[i][2] = target[i][2] - pi;
		}
		else{
			target[i][2] = target[i][2] + pi;
		}	
	}
	
   while(ros::ok()){
      //.....**E-STOP DO NOT TOUCH**.......
   	eStop.block();
      //...................................

     	//fill with your code
		if (done == 0){
			if (pathPlan(target)){
				int foundIT = findPic(n,imgs_track);
				target[destination][3] = 1;
				if (foundIT == 1){
					ROS_INFO("Raisin Bran at X = %f, Y = %f", target[destination][0], target[destination][1]);
				}
				else if (foundIT == 2){
					ROS_INFO("Rice Krispies at X = %f, Y = %f", target[destination][0], target[destination][1]);
				}
				else if (foundIT == 3){
					ROS_INFO("Cinnamon Toast Crunch at X = %f, Y = %f", target[destination][0], target[destination][1]);
				}
				else if (foundIT == 0){
					ROS_INFO("BLANK TAG at X = %f, Y = %f", target[destination][0], target[destination][1]);
				}
			}
			
		}				
	}
	return 0;
}

